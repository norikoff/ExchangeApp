//
//  WalletInteractor.swift
//  ExchangeApp
//
//  Created by Юрий Нориков on 03.12.2019.
//  Copyright (c) 2019 norikoff. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WalletBusinessLogic
{
    func getWallet()
}

protocol WalletDataStore
{
  //var name: String { get set }
}

class WalletInteractor: WalletBusinessLogic, WalletDataStore
{
    
  var presenter: WalletPresentationLogic?
    let utils: NetworkService?
    let service: ApiService?
    let dataBase = WalletDao()
  //var name: String = ""
  
    init() {
        utils = UtilsService()
        service = PoloniexApiService(utilService: utils!)
    }
    
  // MARK: Do something
    
    func getWallet() {
        if Reachability.isConnectedToNetwork(){
            service!.getWallet { result in
                switch result {
                case .success(let dataW):
                    var wallet = dataW
                    self.service!.getWalletAddress(){ result in
                        switch result {
                        case .success(let data):
                            print(Thread.current)
                            for i in 0..<(wallet.count) {
                                wallet[i].address = data.filter{ $0.name.lowercased().elementsEqual(wallet[i].name.lowercased()) }.first?.address
                                }
                            let response = Wallet.Something.Response.init(wallet: wallet, errorMessage: nil)
                            self.dataBase.clear(){_ in}
                            self.dataBase.saveAll(model: wallet){_ in}
                            self.presenter?.presentWallet(response: response)
                        case .failure(let error):
                            print(error.localizedDescription)
                            let response = Wallet.Something.Response(wallet: nil, errorMessage: error.error)
                            self.presenter?.presentError(response: response)
                        }
                    }
                case .failure(let error):
                    let response = Wallet.Something.Response(wallet: nil, errorMessage: error.error)
                    self.presenter?.presentError(response: response)
                }
            }
        }else{
            dataBase.getAll(){
                result in
                switch result {
                case .success(let data):
                    if let unData = data, unData.count != 0 {
                        let response = Wallet.Something.Response.init(wallet: unData, errorMessage: nil)
                        self.presenter?.presentWallet(response: response)
                    }else{
                        let response = Wallet.Something.Response(wallet: nil, errorMessage: "Empty wallet")
                        self.presenter?.presentError(response: response)
                    }
                case .failure(let error):
                    let response = Wallet.Something.Response(wallet: nil, errorMessage: error.error)
                    self.presenter?.presentError(response: response)
                }
                
            }
        }
    }
    
}
