//
//  PairsInteractor.swift
//  ExchangeApp
//
//  Created by Юрий Нориков on 06.12.2019.
//  Copyright (c) 2019 norikoff. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PairsBusinessLogic
{
//  func doSomething(request: Pairs.Something.Request)
    func getPairs()
}

protocol PairsDataStore{
    
}

class PairsInteractor: PairsBusinessLogic, PairsDataStore
{
  var presenter: PairsPresentationLogic?
    let utils: NetworkService?
    let service: ApiService?
    let dataBase = PairDao()
    
    init() {
        utils = UtilsService()
        service = PoloniexApiService(utilService: utils!)
    }
  
  // MARK: Action
  
    func getPairs() {
        if Reachability.isConnectedToNetwork(){
            service!.getPairs { result in
                switch result {
                case .success(let data):
                    self.dataBase.saveAll(model: data){_ in}
                    let response = Pairs.Something.Response.init(pairs: data, errorMessage: nil)
                    self.presenter?.presentPairs(response: response)
                case .failure(let error):
                    let response = Pairs.Something.Response(pairs: nil, errorMessage: error.error)
                    self.presenter?.presentError(response: response)
                }
            }
        }else{
            dataBase.getAll(param: nil){
                result in
                switch result {
                case .success(let data):
                    if let unData = data, unData.count != 0 {
                        let response = Pairs.Something.Response.init(pairs: unData, errorMessage: nil)
                        self.presenter?.presentPairs(response: response)
                    }else{
                        let response = Pairs.Something.Response(pairs: nil, errorMessage: "Empty pairs")
                        self.presenter?.presentError(response: response)
                    }
                case .failure(let error):
                    print("")
                    let response = Pairs.Something.Response(pairs: nil, errorMessage: error.error)
                    self.presenter?.presentError(response: response)
                }
                
            }
        }
    }
  
}
