//
//  HistoryInteractor.swift
//  ExchangeApp
//
//  Created by Юрий Нориков on 03.12.2019.
//  Copyright (c) 2019 norikoff. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HistoryBusinessLogic
{
    func getListOfOrders()
}

protocol HistoryDataStore
{
    //var name: String { get set }
}

class HistoryInteractor: HistoryBusinessLogic, HistoryDataStore
{
    var presenter: HistoryPresentationLogic?
    var worker: HistoryWorker?
    let dataBase = SimpleOrderDao()
    
    // MARK: Do something
    
    func getListOfOrders() {
        let utils = UtilsService()
        let worker = PoloniexApiService(utilService: utils)
        if Reachability.isConnectedToNetwork(){
        worker.getOrders { result in
            switch result {
            case .success(let data):
                let response = History.Something.Response.init(orders: data, errorMessage: nil)
                self.dataBase.clear(){_ in}
                self.dataBase.saveAll(model: data){_ in}
                self.presenter?.presentOrders(response: response)
            case .failure(let error):
                let response = History.Something.Response.init(orders: nil, errorMessage: error.error)
                self.presenter?.presentError(response: response)
            }
        }
        }else{
            dataBase.getAll(){
                result in
                switch result {
                case .success(let data):
                    if let unData = data, unData.count != 0 {
                        let response = History.Something.Response.init(orders: unData, errorMessage: nil)
                        self.presenter?.presentOrders(response: response)
                    }else{
                        let response = History.Something.Response(orders: nil, errorMessage: "Empty wallet")
                        self.presenter?.presentError(response: response)
                    }
                case .failure(let error):
                    let response = History.Something.Response(orders: nil, errorMessage: error.error)
                    self.presenter?.presentError(response: response)
                }
                
            }
        }
    }
}
