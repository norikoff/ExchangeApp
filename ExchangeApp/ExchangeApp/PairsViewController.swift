//
//  PairsViewController.swift
//  ExchangeApp
//
//  Created by Юрий Нориков on 06.12.2019.
//  Copyright (c) 2019 norikoff. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PairsDisplayLogic: class
{
    func displayPairs(viewModel: Pairs.Something.ViewModel)
    func displayAllert(viewModel: Pairs.Something.ViewModel)
}

class PairsViewController: UIViewController, PairsDisplayLogic
{
  var interactor: PairsBusinessLogic?
  var router: (NSObjectProtocol & PairsRoutingLogic & PairsDataPassing)?
    
    var pairs: [EntryList.Pair]?
    var currentPairs: [EntryList.Pair]?
    
    private let refreshControl = UIRefreshControl()
    
    let tableView: UITableView = {
        let  tableView = UITableView()
        tableView.backgroundColor = .black
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.separatorStyle = .none
        return tableView
    }()
    
    
    let searchField: UITextField = {
        let textField = UITextField()
        
        textField.backgroundColor = .black
        textField.textColor = .white
        textField.textAlignment = .center
        textField.attributedPlaceholder =
            NSAttributedString(string: "Enter pair name", attributes: [NSAttributedString.Key.foregroundColor: UIColor.white])
        textField.layer.borderWidth = 1.0
        textField.layer.borderColor = UIColor.orange.cgColor
        textField.layer.cornerRadius = 20
        textField.translatesAutoresizingMaskIntoConstraints = false
        
        textField.addTarget(self, action: #selector(textFieldDidChange(_:)), for: UIControl.Event.editingChanged)
        
        return textField
    }()
    
    let reuseId = "UITableViewCellreuseId"

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = PairsInteractor()
    let presenter = PairsPresenter()
    let router = PairsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    self.title = "Pairs"
    self.view.backgroundColor = UIColor.black
    tableView.dataSource = self
    tableView.delegate = self
    tableView.register(PairCell.self, forCellReuseIdentifier: reuseId)
    let label = UILabel(frame: CGRect.zero)
    label.text = "Number"
    label.font = UIFont.systemFont(ofSize: 16)
    label.translatesAutoresizingMaskIntoConstraints = false
    label.clipsToBounds = true
    label.sizeToFit()
    label.textColor = .orange
    
//    let amountLable = UILabel(frame: CGRect.zero)
//    amountLable.text = "Amount"
//    amountLable.font = UIFont.systemFont(ofSize: 16)
//    amountLable.translatesAutoresizingMaskIntoConstraints = false
//    amountLable.clipsToBounds = true
//    amountLable.sizeToFit()
//    amountLable.textColor = .orange
//    amountLable.textAlignment = .center
    
    let priceLable = UILabel(frame: CGRect.zero)
    priceLable.text = "24h Change"
    priceLable.font = UIFont.systemFont(ofSize: 16)
    priceLable.translatesAutoresizingMaskIntoConstraints = false
    priceLable.clipsToBounds = true
    priceLable.sizeToFit()
    priceLable.textColor = .orange
    priceLable.textAlignment = .right
    tableView.addSubview(refreshControl)
    refreshControl.addTarget(self, action: #selector(refreshOrderData(_:)), for: .valueChanged)
    self.view.addSubview(tableView)
    self.view.addSubview(label)
    self.view.addSubview(priceLable)
//    self.view.addSubview(amountLable)
    self.view.addSubview(searchField)
    
    NSLayoutConstraint.activate([
        searchField.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 8),
        searchField.leftAnchor.constraint(equalTo: view.leftAnchor, constant: 8),
        searchField.rightAnchor.constraint(equalTo: view.rightAnchor, constant: -8),
        searchField.heightAnchor.constraint(equalToConstant: 40),
        
        label.leftAnchor.constraint(equalTo: self.view.leftAnchor, constant: 4),
        label.topAnchor.constraint(equalTo: searchField.bottomAnchor),
        
        priceLable.rightAnchor.constraint(equalTo: self.view.rightAnchor, constant: -8),
        priceLable.topAnchor.constraint(equalTo: searchField.bottomAnchor),
        
        tableView.topAnchor.constraint(equalTo: priceLable.bottomAnchor),
        tableView.leftAnchor.constraint(equalTo: view.leftAnchor),
        tableView.rightAnchor.constraint(equalTo: view.rightAnchor),
        tableView.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor, constant: -self.tabBarController!.tabBar.frame.size.height/2)])
  }
  
    override func viewWillAppear(_ animated: Bool) {
        self.showSpinner(onView: self.view)
        interactor!.getPairs()
    }
    
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  
    @objc func refreshOrderData(_ sender: Any){
        searchField.text?.removeAll()
        interactor!.getPairs()
    }
    
    @objc func textFieldDidChange(_ textField: UITextField) {
        
        if let text = textField.text {
            self.search(by: text)
        }
    }
    
    private func search(by searchText: String) {
        currentPairs?.removeAll()
        if !searchText.isEmpty{
            currentPairs = pairs?.filter({ wal -> Bool in
                return wal.pairName.lowercased().contains(searchText.lowercased())
            })
        }else {
            currentPairs = pairs

        }
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
    
    func displayPairs(viewModel: Pairs.Something.ViewModel){
        DispatchQueue.main.async {
            guard let data = viewModel.pairs, data.count > 0 else{
                self.refreshControl.endRefreshing()
                self.removeSpinner()
                return
            }
            self.pairs = viewModel.pairs
            self.currentPairs = self.pairs
            self.tableView.reloadData()
            self.refreshControl.endRefreshing()
            self.removeSpinner()
        }
    }
    
    func displayAllert(viewModel: Pairs.Something.ViewModel){
        DispatchQueue.main.async {
            self.refreshControl.endRefreshing()
            let alert = UIAlertController(title: "Error", message: viewModel.errorMessage!, preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "Okay", style: .cancel, handler: nil))
            self.present(alert, animated: true)
            self.removeSpinner()
        }
    }
}

extension PairsViewController: UITableViewDataSource, UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if currentPairs![indexPath.row].content.isFrozen.elementsEqual("0") {
            router?.routeToTrade(pairName: currentPairs![indexPath.row].pairName)
        }else{
            displayAllert(viewModel: Pairs.Something.ViewModel(pairs: nil, errorMessage: "Trade is frozen"))
        }
        
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if let count = self.currentPairs{
            return count.count
        }
        return 0
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: reuseId, for: indexPath) as! PairCell
        cell.layer.borderWidth = 1.0
        cell.layer.borderColor = UIColor.black.cgColor
        cell.backgroundColor = .black
        let bgColorView = UIView()
        bgColorView.backgroundColor = UIColor.orange
        cell.selectedBackgroundView = bgColorView
        cell.textLabel?.textColor = .white
        if indexPath.row < currentPairs!.count {
            let model = currentPairs![indexPath.row]
            cell.pair = model
        }
        return cell
    }
}
