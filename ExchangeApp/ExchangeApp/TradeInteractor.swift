//
//  TradeInteractor.swift
//  ExchangeApp
//
//  Created by Юрий Нориков on 04.12.2019.
//  Copyright (c) 2019 norikoff. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TradeBusinessLogic
{
    func getChart(pairName: String, start: String, end: String)
    func updateChart(pairName: String, start: String, end: String)
    
    func buy(pairName: String, rate: String, amount: String)
    func sell(pairName: String, rate: String, amount: String)
}

protocol TradeDataStore
{
    //var name: String { get set }
}

class TradeInteractor: TradeBusinessLogic, TradeDataStore
{
    var presenter: TradePresentationLogic?
    let utils: NetworkService?
    let service: ApiService?
    let dataBase = ChartDao()
    //var name: String = ""
    
    init() {
        utils = UtilsService()
        service = PoloniexApiService(utilService: utils!)
    }
    // MARK: Do something
    
    func updateChart(pairName: String, start: String, end: String){
        func getChart(pairName: String, start: String, end: String) {
            if Reachability.isConnectedToNetwork(){
                service!.getChart(pairName: pairName, start: start, end: end, period: String(7200)) { result in
                    switch result {
                    case .success(let data):
                        let response = Trade.Something.Response.init(chart: data, errorMessage: nil)
                        self.presenter?.presentUpdateChart(response: response)
                    case .failure(let error):break
                        //                    let response = Wallet.Something.Response(wallet: nil, errorMessage: error.error)
                        //                    self.presenter?.presentError(response: response)
                    }
                }
            }else{
                //            dataBase.getAll(){
                //                result in
                //                switch result {
                //                case .success(let data):
                //                    if let unData = data, unData.count != 0 {
                //                        let response = Wallet.Something.Response.init(wallet: unData, errorMessage: nil)
                //                        self.presenter?.presentWallet(response: response)
                //                    }else{
                //                        let response = Wallet.Something.Response(wallet: nil, errorMessage: "Empty wallet")
                //                        self.presenter?.presentError(response: response)
                //                    }
                //                case .failure(let error):
                //                    let response = Wallet.Something.Response(wallet: nil, errorMessage: error.error)
                //                    self.presenter?.presentError(response: response)
                //                }
                
                //            }
            }
        }
    }
    
    func getChart(pairName: String, start: String, end: String) {
        if Reachability.isConnectedToNetwork(){
            service!.getChart(pairName: pairName, start: start, end: end, period: String(7200)) { result in
                switch result {
                case .success(let data):
                    let response = Trade.Something.Response.init(chart: data, errorMessage: nil)
                    self.presenter?.presentChart(response: response)
                case .failure(let error):
                    let response = Trade.Something.Response(chart: nil, errorMessage: error.error)
                    self.presenter?.presentError(response: response)
                }
            }
        }else{
            dataBase.getAll(){
                result in
                switch result {
                case .success(let data):
                    if let unData = data, unData.count != 0 {
                        let response = Trade.Something.Response.init(chart: data, errorMessage: nil)
                        self.presenter?.presentChart(response: response)
                    }else{
                        let response = Trade.Something.Response(chart: nil, errorMessage: "Empty chart")
                        self.presenter?.presentError(response: response)
                    }
                case .failure(let error):
                    let response = Trade.Something.Response(chart: nil, errorMessage: error.error)
                    self.presenter?.presentError(response: response)
                }
                
            }
        }
    }
    
    func buy(pairName: String, rate: String, amount: String){
        service!.buyOrder(currencyPair: pairName, rate: rate, amount: amount){result in
            switch result {
            case .success(let data):
                let response = Trade.Something.Response(chart: nil, errorMessage: data.orderNumber)
                self.presenter?.presentSuccess(response: response)
            case .failure(let error):
                let response = Trade.Something.Response(chart: nil, errorMessage: error.error)
                self.presenter?.presentError(response: response)
            }
            
        }
    }
    
    func sell(pairName: String, rate: String, amount: String){
        service!.sellOrder(currencyPair: pairName, rate: rate, amount: amount){result in
            switch result {
            case .success(let data):
                let response = Trade.Something.Response(chart: nil, errorMessage: data.orderNumber)
                self.presenter?.presentSuccess(response: response)
            case .failure(let error):
                let response = Trade.Something.Response(chart: nil, errorMessage: error.error)
                self.presenter?.presentError(response: response)
            }
            
        }
    }
    
}
