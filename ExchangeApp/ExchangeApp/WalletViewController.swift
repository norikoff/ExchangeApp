//
//  WalletViewController.swift
//  ExchangeApp
//
//  Created by Юрий Нориков on 03.12.2019.
//  Copyright (c) 2019 norikoff. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Charts

protocol WalletDisplayLogic: class
{
    func displayWallet(viewModel: Wallet.Something.ViewModel)
    func displayAllert(viewModel: Wallet.Something.ViewModel)
}

class WalletViewController: UIViewController, WalletDisplayLogic
{
    var interactor: WalletBusinessLogic?
    
    private let refreshControl = UIRefreshControl()
    
    var searchField: UITextField!
    
    let tableView: UITableView = {
        let  tableView = UITableView()
        tableView.backgroundColor = .black
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.separatorStyle = .none
        return tableView
    }()
    
    let searchDelayQueue: OperationQueue = {
        let queue = OperationQueue()
        queue.maxConcurrentOperationCount = 1
        return queue
    }()
    
    let reuseId = "UITableViewCellreuseId"
    var wallet: [EntryList.Currency]?
    var currentwallet: [EntryList.Currency]?
    
    var pieChartView: PieChartView = {
        let pieChartView = PieChartView(frame: CGRect.zero)
        pieChartView.translatesAutoresizingMaskIntoConstraints = false
        pieChartView.sizeToFit()
        return pieChartView
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = WalletInteractor()
        let presenter = WalletPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    
    // MARK: View lifecycle
    
    var players: [String] = []
    var goals: [Int] = []
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.title = "Wallet"
        self.view.backgroundColor = UIColor.black
        tableView.dataSource = self
        tableView.delegate = self
        tableView.register(WalletCell.self, forCellReuseIdentifier: reuseId)
        tableView.addSubview(refreshControl)
        refreshControl.addTarget(self, action: #selector(refreshWalletData(_:)), for: .valueChanged)
        
        searchField = TextFieldFactory.createTextField(title: "Enter currency name")
        searchField.addTarget(self, action: #selector(textFieldDidChange(_:)), for: UIControl.Event.editingChanged)
        
        let label = UILabel(frame: CGRect.zero)
        label.text = "Currency"
        label.font = UIFont.systemFont(ofSize: 16)
        label.translatesAutoresizingMaskIntoConstraints = false
        label.clipsToBounds = true
        label.sizeToFit()
        label.textColor = .orange
        
        let amountLable = UILabel(frame: CGRect.zero)
        amountLable.text = "Amount"
        amountLable.font = UIFont.systemFont(ofSize: 16)
        amountLable.translatesAutoresizingMaskIntoConstraints = false
        amountLable.clipsToBounds = true
        amountLable.sizeToFit()
        amountLable.textColor = .orange
        amountLable.textAlignment = .center
        
        let priceLable = UILabel(frame: CGRect.zero)
        priceLable.text = "Price"
        priceLable.font = UIFont.systemFont(ofSize: 16)
        priceLable.translatesAutoresizingMaskIntoConstraints = false
        priceLable.clipsToBounds = true
        priceLable.sizeToFit()
        priceLable.textColor = .orange
        priceLable.textAlignment = .right
        
//        pieChartView.frame = CGRect(x: 0.0, y: (self.navigationController?.navigationBar.frame.height)!*2, width: view.frame.width, height: view.frame.height/3)
        pieChartView.legend.textColor = .white
        
        
        self.view.addSubview(label)
        self.view.addSubview(priceLable)
        self.view.addSubview(amountLable)
        self.view.addSubview(tableView)
        self.view.addSubview(searchField)
        self.view.addSubview(pieChartView)
        
        NSLayoutConstraint.activate([
            pieChartView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            pieChartView.bottomAnchor.constraint(equalTo: searchField.topAnchor),
            pieChartView.leadingAnchor.constraint(equalTo:view.leadingAnchor, constant: 15),
            pieChartView.trailingAnchor.constraint(equalTo:view.trailingAnchor, constant: -15),
            
            
            searchField.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: view.frame.height/3),
            searchField.leftAnchor.constraint(equalTo: view.leftAnchor, constant: 8),
            searchField.rightAnchor.constraint(equalTo: view.rightAnchor, constant: -8),
            searchField.heightAnchor.constraint(equalToConstant: 40),
            
            label.leftAnchor.constraint(equalTo: self.view.leftAnchor, constant: 4),
            label.topAnchor.constraint(equalTo: searchField.bottomAnchor),
            
            amountLable.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            amountLable.rightAnchor.constraint(equalTo: priceLable.leftAnchor, constant: -4),
            amountLable.topAnchor.constraint(equalTo: searchField.bottomAnchor),
            amountLable.leftAnchor.constraint(equalTo: label.rightAnchor),
            
            priceLable.rightAnchor.constraint(equalTo: self.view.rightAnchor, constant: -8),
            priceLable.topAnchor.constraint(equalTo: searchField.bottomAnchor),
            priceLable.leftAnchor.constraint(equalTo: amountLable.rightAnchor),
            
            tableView.topAnchor.constraint(equalTo: label.bottomAnchor, constant: 8),
            tableView.leftAnchor.constraint(equalTo: view.leftAnchor),
            tableView.rightAnchor.constraint(equalTo: view.rightAnchor),
            tableView.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor, constant: -self.tabBarController!.tabBar.frame.size.height/2)])
    }
    
    override func viewWillAppear(_ animated: Bool) {
        self.showSpinner(onView: self.view)
        interactor!.getWallet()
    }
    
    // MARK: Do something
    
    @objc func textFieldDidChange(_ textField: UITextField) {
        if let text = textField.text {
                self.search(by: text)
        }
        
    }
    
    private func search(by searchText: String) {
        currentwallet?.removeAll()
        if !searchText.isEmpty{
            currentwallet = wallet?.filter({ wal -> Bool in
                return wal.name.lowercased().contains(searchText.lowercased())
            })
        }else {
            currentwallet = wallet
            
        }
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
    
    @objc func refreshWalletData(_ sender: Any){
        searchField.text?.removeAll()
        interactor!.getWallet()
    }
   
    
    func displayWallet(viewModel: Wallet.Something.ViewModel)
    {
        DispatchQueue.main.async {
            self.wallet = viewModel.wallet
            self.wallet = self.wallet!.sorted()
            self.currentwallet = self.wallet
            self.refreshControl.endRefreshing()
            self.customizeChart(dataPoints: viewModel.wallet!)
            self.tableView.reloadData()
            self.removeSpinner()
        }
    }
    
    func customizeChart(dataPoints: [EntryList.Currency]) {
        
        var dataEntries: [ChartDataEntry] = []
        let sortData = dataPoints.filter { cur -> Bool in
            let val = Double(cur.content.btcValue) ?? 0.00000000
             return val > 0.00000000
        }
        
        for data in sortData {
            let dataEntry = PieChartDataEntry(value: Double(data.content.btcValue) ?? 0, label: data.name, data:  data.name as AnyObject)
            dataEntries.append(dataEntry)
        }
        // 2. Set ChartDataSet
        let pieChartDataSet = PieChartDataSet(entries: dataEntries, label: nil)
        pieChartDataSet.colors = colorsOfCharts(numbersOfColor: dataPoints.count)
        
        // 3. Set ChartData
        let pieChartData = PieChartData(dataSet: pieChartDataSet)
        let format = NumberFormatter()
        format.numberStyle = .decimal
        let formatter = DefaultValueFormatter(formatter: format)
        pieChartData.setValueFormatter(formatter)
        
        // 4. Assign it to the chart's data
        pieChartView.data = pieChartData
        
    }
    
    private func colorsOfCharts(numbersOfColor: Int) -> [UIColor] {
        var colors: [UIColor] = []
        for _ in 0..<numbersOfColor {
            let red = Double(arc4random_uniform(256))
            let green = Double(arc4random_uniform(256))
            let blue = Double(arc4random_uniform(256))
            let color = UIColor(red: CGFloat(red/255), green: CGFloat(green/255), blue: CGFloat(blue/255), alpha: 1)
            colors.append(color)
        }
        return colors
    }
    
    func displayAllert(viewModel: Wallet.Something.ViewModel){
        DispatchQueue.main.async {
            self.refreshControl.endRefreshing()
            let alert = UIAlertController(title: "Error", message: viewModel.errorMessage!, preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "Okay", style: .cancel, handler: nil))
            self.present(alert, animated: true)
            self.removeSpinner()
        }
    }
    
    func displayAddress(viewModel: String){
        let alert = UIAlertController(title: "Address", message: viewModel, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Copy", style: .default, handler: { action in
            UIPasteboard.general.string = viewModel
        }))
        alert.addAction(UIAlertAction(title: "Okay", style: .cancel, handler: nil))
        self.present(alert, animated: true)
    }
}


extension WalletViewController: UITableViewDataSource, UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if let addr = currentwallet![indexPath.row].address {
            displayAddress(viewModel: addr)
        }else{
            displayAllert(viewModel: Wallet.Something.ViewModel(wallet: nil, errorMessage: "Generate address on site"))
        }
        
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if let count = self.currentwallet{
            return count.count
        }
        return 0
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: reuseId, for: indexPath) as! WalletCell
        cell.layer.borderWidth = 1.0
        cell.layer.borderColor = UIColor.black.cgColor
        cell.backgroundColor = .black
        let bgColorView = UIView()
        bgColorView.backgroundColor = UIColor.orange
        cell.selectedBackgroundView = bgColorView
        cell.textLabel?.textColor = .white
        if indexPath.row < currentwallet!.count {
            let model = currentwallet![indexPath.row]
            cell.wallet = model
        }
        return cell
    }
}
