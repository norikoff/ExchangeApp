//
//  TradeViewController.swift
//  ExchangeApp
//
//  Created by Юрий Нориков on 04.12.2019.
//  Copyright (c) 2019 norikoff. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Charts

protocol TradeDisplayLogic: class
{
    func displayChart(viewModel: Trade.Something.ViewModel)
    func displayUpdatedChart(viewModel: Trade.Something.ViewModel)
    func displayAllert(viewModel: Trade.Something.ViewModel)
    func displaySuccess(viewModel: Trade.Something.ViewModel)
}

class TradeViewController: UIViewController, TradeDisplayLogic, ChartViewDelegate
{
    var interactor: TradeBusinessLogic?
    
    let buyButton: UIButton = {
        let buyButton = UIButton(frame: CGRect.zero)
        buyButton.backgroundColor = UIColor.green
        buyButton.setTitle("BUY", for: .normal)
        buyButton.translatesAutoresizingMaskIntoConstraints = false
        buyButton.sizeToFit()
        return buyButton
    }()
    
    var charts: [Chart]?
    
    var timer: Timer?
    
    var buyAmount: UITextField!
    var sellAmount: UITextField!
    var buyPrice: UITextField!
    var sellPrice: UITextField!
    
    let sellButton: UIButton = {
        let sellButton = UIButton(frame: CGRect.zero)
        sellButton.backgroundColor = UIColor.red
        sellButton.setTitle("SELL", for: .normal)
        sellButton.translatesAutoresizingMaskIntoConstraints = false
        sellButton.sizeToFit()
        return sellButton
    }()
    
    var candleChartView: CandleStickChartView = {
        let candleChartView = CandleStickChartView(frame: CGRect.zero)
        candleChartView.translatesAutoresizingMaskIntoConstraints = false
        candleChartView.sizeToFit()
        candleChartView.chartDescription?.enabled = false
        
        candleChartView.noDataTextColor = .white
        candleChartView.dragEnabled = true
        candleChartView.setScaleEnabled(true)
        candleChartView.maxVisibleCount = 200
        candleChartView.pinchZoomEnabled = true
        candleChartView.legend.textColor = .white
        candleChartView.legend.horizontalAlignment = .right
        candleChartView.legend.verticalAlignment = .top
        candleChartView.legend.orientation = .vertical
        candleChartView.legend.drawInside = false
        candleChartView.legend.font = UIFont(name: "HelveticaNeue-Light", size: 10)!
        
        candleChartView.leftAxis.labelFont = UIFont(name: "HelveticaNeue-Light", size: 10)!
        
        candleChartView.leftAxis.labelTextColor = .white
        
        candleChartView.leftAxis.spaceTop = 0.3
        candleChartView.leftAxis.spaceBottom = 0.3
        candleChartView.leftAxis.axisMinimum = 0
        
        candleChartView.rightAxis.enabled = false
        
        candleChartView.xAxis.labelPosition = .bottom
        candleChartView.xAxis.labelFont = UIFont(name: "HelveticaNeue-Light", size: 10)!
        candleChartView.xAxis.labelTextColor = .white
        return candleChartView
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = TradeInteractor()
        let presenter = TradePresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.black
        
        buyButton.addTarget(self, action: #selector(buyPush), for: .touchUpInside)
        sellButton.addTarget(self, action: #selector(sellPush), for: .touchUpInside)
        buyAmount = TextFieldFactory.createTextField(title: "Amount")
        sellAmount = TextFieldFactory.createTextField(title: "Amount")
        buyPrice = TextFieldFactory.createTextField(title: "Price")
        sellPrice = TextFieldFactory.createTextField(title: "Price")
        buyAmount.delegate = self
        sellAmount.delegate = self
        buyPrice.delegate = self
        sellPrice.delegate = self
        self.view.addSubview(buyButton)
        self.view.addSubview(sellButton)
        self.view.addSubview(candleChartView)
        self.view.addSubview(buyAmount)
        self.view.addSubview(sellAmount)
        self.view.addSubview(buyPrice)
        self.view.addSubview(sellPrice)
        buyAmount.addTarget(self, action: #selector(refreshBuyPrice(_:)), for: UIControl.Event.editingChanged)
        sellAmount.addTarget(self, action: #selector(refreshSellPrice(_:)), for: UIControl.Event.editingChanged)
        
        
        NSLayoutConstraint.activate([
            
            buyAmount.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor,constant: 8),
            buyAmount.rightAnchor.constraint(equalTo: view.centerXAnchor),
            buyAmount.leftAnchor.constraint(equalTo: view.leftAnchor),
            
            sellAmount.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 8),
            sellAmount.rightAnchor.constraint(equalTo: view.rightAnchor),
            sellAmount.leftAnchor.constraint(equalTo: view.centerXAnchor),
            
            buyPrice.topAnchor.constraint(equalTo: buyAmount.bottomAnchor, constant: 8),
            buyPrice.rightAnchor.constraint(equalTo: view.centerXAnchor),
            buyPrice.leftAnchor.constraint(equalTo: view.leftAnchor),
            
            sellPrice.topAnchor.constraint(equalTo: sellAmount.bottomAnchor, constant: 8),
            sellPrice.rightAnchor.constraint(equalTo: view.rightAnchor),
            sellPrice.leftAnchor.constraint(equalTo: view.centerXAnchor),
            
            candleChartView.topAnchor.constraint(equalTo: buyPrice.bottomAnchor,constant: 8),
            candleChartView.bottomAnchor.constraint(equalTo: view.centerYAnchor),
            candleChartView.rightAnchor.constraint(equalTo:view.rightAnchor),
            candleChartView.leftAnchor.constraint(equalTo:view.leftAnchor),
            
            
            buyButton.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor, constant: -self.tabBarController!.tabBar.frame.size.height),
            buyButton.leftAnchor.constraint(equalTo: self.view.leftAnchor),
            buyButton.rightAnchor.constraint(equalTo: self.view.centerXAnchor),
            
            sellButton.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor, constant: -self.tabBarController!.tabBar.frame.size.height),
            sellButton.rightAnchor.constraint(equalTo: self.view.rightAnchor),
            sellButton.leftAnchor.constraint(equalTo: self.view.centerXAnchor),
            ])
    }
    
    override func viewWillAppear(_ animated: Bool) {
        interactor?.getChart(pairName: self.title!, start: String(NSDate().timeIntervalSince1970-2592000), end: String(NSDate().timeIntervalSince1970))
        createTimer()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        timer?.invalidate()
        timer = nil
    }
    
    func setDataCount(chart: [Chart]) {
        self.charts = chart
        var i = 0
        let yVals1 = chart.map { (ch) -> CandleChartDataEntry in
            let high = Double(ch.high)
            let low = Double(ch.low)
            let open = Double(ch.open)
            let close = Double(ch.close)
            i = i+1
            return CandleChartDataEntry(x: Double(i), shadowH: high, shadowL: low, open: open, close: close)
            
        }
        
        let set1 = CandleChartDataSet(entries: yVals1, label: "Data Set")
        set1.axisDependency = .left
        set1.setColor(UIColor(white: 80/255, alpha: 1))
        set1.drawIconsEnabled = false
        set1.shadowColor = .white
        set1.shadowWidth = 0.7
        set1.decreasingColor = .red
        set1.decreasingFilled = true
        set1.increasingColor = UIColor(red: 122/255, green: 242/255, blue: 84/255, alpha: 1)
        set1.increasingFilled = false
        set1.neutralColor = .blue
        
        let data = CandleChartData(dataSet: set1)
        candleChartView.data = data
        candleChartView.candleData?.setValueTextColor(.white)
        candleChartView.setVisibleXRangeMaximum(10)
        candleChartView.xAxis.avoidFirstLastClippingEnabled = true
        candleChartView.moveViewToX(Double(chart.count-1))
    }
    
    // MARK: Action
    
    func displayChart(viewModel: Trade.Something.ViewModel){
        DispatchQueue.main.async {
            self.setDataCount(chart: viewModel.chart!)
        }
    }
    
    func displayUpdatedChart(viewModel: Trade.Something.ViewModel){
        DispatchQueue.main.async {
                var i = self.candleChartView.data?.entryCount ?? 0
                for data in viewModel.chart ?? []{
                    let high = Double(data.high)
                    let low = Double(data.low)
                    let open = Double(data.open)
                    let close = Double(data.close)
                    i = i+1
                    let upD =  CandleChartDataEntry(x: Double(i), shadowH: high, shadowL: low, open: open, close: close)
                    self.candleChartView.data!.addEntry(upD, dataSetIndex: i)
                    self.candleChartView.data!.notifyDataChanged(); // let the data know a dataSet changed
                    self.candleChartView.notifyDataSetChanged(); // let the chart know it's data changed
            }
        }
    }
    
    @objc func buyPush(){
        self.showSpinner(onView: self.view)
        interactor?.buy(pairName: self.title!, rate: buyPrice.text!, amount: buyAmount.text!)
    }
    
    @objc func sellPush(){
        self.showSpinner(onView: self.view)
        interactor?.sell(pairName: self.title!, rate: sellPrice.text!, amount: sellAmount.text!)
    }
    
    @objc func refreshBuyPrice(_ sender: Any){
        let val = Double(buyAmount.text!) ?? 0.00000000
        buyPrice.text = String(val * Double((charts?.last!.close)!))
    }
    
    @objc func refreshSellPrice(_ sender: Any){
        let val = Double(sellAmount.text!) ?? 0.00000000
        sellPrice.text = String(val * Double((charts?.last!.close)!))
    }
    
    func displayAllert(viewModel: Trade.Something.ViewModel){
        DispatchQueue.main.async {
            let alert = UIAlertController(title: "Error", message: viewModel.errorMessage!, preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "Okay", style: .cancel, handler: nil))
            self.present(alert, animated: true)
            self.removeSpinner()
        }
    }
    
    func displaySuccess(viewModel: Trade.Something.ViewModel){
        DispatchQueue.main.async {
            let alert = UIAlertController(title: "Success", message: viewModel.errorMessage!, preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "Okay", style: .cancel, handler: nil))
            self.present(alert, animated: true)
            self.removeSpinner()
        }
    }
}


extension TradeViewController: UITextFieldDelegate {
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        guard CharacterSet(charactersIn: "0123456789.").isSuperset(of: CharacterSet(charactersIn: string)) else {
            return false
        }
        return true
    }
}


extension TradeViewController{
    
    func createTimer() {
        if timer == nil {
            timer = Timer.scheduledTimer(timeInterval: 1.0,
                                         target: self,
                                         selector: #selector(updateTimer),
                                         userInfo: nil,
                                         repeats: true)
        }
    }
    
    @objc func updateTimer() {
        interactor?.updateChart(pairName: self.title!, start: String(charts!.max { $0.date < $1.date }!.date+1) , end: String(NSDate().timeIntervalSince1970))
    }
}
